%% Exercise 3 solution
%
% Benjamin Sanchez
% Ivan Domenzain    2019-10-02

%% Problem 1: Finding a flux distribution
% 1.1 Setting up the model
%
% First, define all relevant variables:
%function exercise_3_solution
load('../models/smallModel.mat');
S   = model.S;
b   = model.b;
c   = model.c;
LB  = model.lb;
UB  = model.ub;
REV = model.rev;
% As suggested in the instructions, we will change S so it is not sparse:
S = full(S);
%%
% The number of fluxes and metabolites are:
num_rxns = length(c);
num_mets = length(b);
disp(['Number of reactions: ' num2str(num_rxns)])
disp(['Number of metabolites: ' num2str(num_mets)])
%%
% Therefore in theory the problem can be solved:
disp(['Degrees of freedom: ' num2str(num_rxns - num_mets)])
%%
% 1.2 Sanity and consistency checks
% A) How many reversible reactions are there in the model? 
rev_Rxns = find(REV);
disp(['Number of reversible reactions: ' num2str(length(rev_Rxns))])
%Mathematical confirmation
inconsistencies = rev_Rxns(logical(REV(rev_Rxns).*LB(rev_Rxns))==0);
disp(['Reversibility inconsistency found in: ' model.rxnNames{inconsistencies}])
%
% B) Glucose-6-phosphate isomerase is reported to be reversible but it is
% not in the model
disp('Reversible reactions:')
disp(model.rxns(rev_Rxns))
index = find(strcmpi(model.rxnNames,'glucose-6-phosphate isomerase'));
%
% C) Introduce the necessary manual modifications in the network
LB(17)       = -1000;
model.lb(17) = -1000;
LB(9)        = -1000;
model.lb(9)  = -1000;
REV(9)       = 1;
model.rev(9) = 1;
%%
% 1.3 Determined problem:
% 
% Solve for the equations system:
v = S\b
%%
% Check the rank of the matrix:
rank_S = rank(S);
disp(['Rank of S: ' num2str(rank_S)])
disp(['Number of redundant equations: ' num2str(num_mets - rank_S)])
%%
% Eventhough there are 52 equations in the original matrix, 9 of them are 
% redundant, and therefore the problem is largely subdetermined, with a 
% total amount of degrees of freedom of:
disp(['Real degrees of freedom: ' num2str(num_rxns - rank_S)])
%%
% 1.4 Undetermined problem
% 
% a. Exchange fluxes
%
% We start by finding the positions of the relevant exchange fluxes:
pos(1) = find(strcmp(model.rxnNames,'Glucose exchange'));
pos(2) = find(strcmp(model.rxnNames,'O2 exchange'));
pos(3) = find(strcmp(model.rxnNames,'Biomass exchange'));
pos(4) = find(strcmp(model.rxnNames,'CO2 exchange'));
pos(5) = find(strcmp(model.rxnNames,'Acetate exchange'));
pos(6) = find(strcmp(model.rxnNames,'Ethanol exchange'));
pos(7) = find(strcmp(model.rxnNames,'Glycerol exchange'));
%%
% Both glucose and oxygen uptake rates  are blocked:
disp(['glcEX: LB = ' num2str(LB(pos(1))) '; UB = ' num2str(UB(pos(1)))])
disp(['o2EX: LB = '  num2str(LB(pos(2))) '; UB = ' num2str(UB(pos(2)))])
% Change this by decreasing the lower bounds of each reaction:
LB(pos(1)) = -1;
LB(pos(2)) = -10;
%%
% Optimize for growth and plot the exchange fluxes:
v = maximize(c,S,b,LB,UB);
flux_names = {'glcEX','o2EX','bioEX','co2EX','acEX','ethEX','glyEX'};
barplot(v,pos,flux_names,[],'Exchange Fluxes',[])
base = get(gcf,'Position');
base = base(3);

%%
% *Figure 1:* Bar plot with exchange fluxes for aerobic growth under glucose
% limitation.
% 
% In this bar plot, the growth rate is in [1/h], and all the rest are
% fluxes in [mmol/gDWh]. We can see that all carbon is being used for
% biomass and CO2 production, i.e. yeast is respiring.
%%
% b. ATP/NADH/NADPH
% 
% We will plot all related fluxes (multiplied by the corresponding
% stoichiometry) in barplots for simplifying the analysis.
%
[flux_ATP,plot_ATP] = plottedflux('ATP',model.mets,S,v);
model.rxns{strcmp('LSC1LSC2',model.rxns)} = 'LSC';
barplot(flux_ATP,plot_ATP,model.rxns(plot_ATP),[],'Normalized Fluxes',base+200)

%%
% *Figure 2:* Bar plot with ATP fluxes for aerobic growth under glucose
% limitation.
% 
% It can be seen that most ATP is being generated by respiration (reactions 
% NADHX and FADHX), while glycolisis both consumes (reactions PGK and PYK)
% and produces (reactions HXK and PFK) ATP, and the TCA cycle produces only
% a little ATP (reaction LSC). Finally, most ATP is consumed for growth,
% and some for producing Acetyl-CoA (reaction ACS) and oxaloacetate
% (reaction PYC).
% 
[flux_NADH,plot_NADH] = plottedflux('NADH',model.mets,S,v);
barplot(flux_NADH,plot_NADH,model.rxns(plot_NADH),[],'Normalized Fluxes',base+100)

%%
% *Figure 3:* Bar plot with NADH fluxes for aerobic growth under glucose
% limitation.
% 
% NADH seems to be produced mainly in glycolisis (reaction GLD), production
% of Acetyl-CoA (PDH) and TCA cycle (KGD and MDH1). Also because of the
% definition of the growth pseudo-reaction, some of it gets created there.
% It's used almost entirely for respiration (NADHX), and a small fraction for
% glycerol phosphate production (DAR).
%
% NADPH:
[flux_NADPH,plot_NADPH] = plottedflux('NADPH',model.mets,S,v);
barplot(flux_NADPH,plot_NADPH,model.rxns(plot_NADPH),[],'Normalized Fluxes',base)

%%
% *Figure 4:* Bar plot with NADPH fluxes for aerobic growth under glucose
% limitation.
% 
% In the case of NADPH, we see that most of it is produced in the pentose
% phosphate pathway (reactions ZWF and GND), and some is produced in the
% production of acetate (ALD6), the TCA cycle (IDP1) and MAE1. All of it
% gets consumed for growth. This means that NADPH production is coupled to
% growth, important later!
%% Problem 2: Testing objective functions
% 2.1 Fix glucose / Max growth rate
% 
% The objective function is already defined as growth so we only fix
% glucose consumption:
LB(pos(1)) = -1;
va         = maximize(c,S,b,LB,UB);
%% 
% 2.2 Fix glucose / Max ethanol production
% 
% Unconstrain glucose consumption, constrain growth and change the
% objective function:
c          = zeros(num_rxns,1);
c(pos(5))  = +1;
vb         = maximize(c,S,b,LB,UB);
%% 
% 2.3 Fix glucose / Max ATP maintenance
% 
% We constrain glucose consumption, we unconstrain growth and we change the
% objective function:
LB(pos(1))  = -1;
LB(pos(3))  = 0; 
pos_ATPX    = strcmp('ATPX',model.rxns);
c           = zeros(num_rxns,1);
c(pos_ATPX) = +1;
vc          = maximize(c,S,b,LB,UB);
%%
% Comparison of results
% 
% We plot the results:
var_names = {'Max growth','Max acetate','Max ATP maintenance'};
barplot([va,vb,vc],pos,flux_names,var_names,'Normalized Fluxes',base)

%%
% *Figure 5:* Bar plot with exchange fluxes for aerobic growth under
% glucose limitation, assumming different objectives functions. Fluxes are
% normalized by glucose consumption.
% 
% As we can see in the figure, all 3 cases use the same amount of glucose,
% so that's good. Interesting to notice that in the acetate case still a
% lot of biomass is produced. This is because acetate production involves 
% NADPH production as well, and as we saw before NADPH is coupled to
% growth, so the only way of getting rid of it is by redirecting carbon to
% growth. It is less than 100% growth though, and therefore also less O2
% consumption and CO2 production.
%
% Another interesting observation is that if we maximize ATP maintenance,
% the model will predict no growth and 100% of the carbon will go towards
% ethanol production, passing through glycolisis. This result is somewhat
% unexpected, considering that respiration is much more efficient ATP-wise
% compared to fermentation. However, carbon has to go somewhere, so if we
% want to have respiration (which would produce more ATP than fermentation)
% then the carbon cannot go to ethanol anymore, as the NADH is already being
% used up. The option would be then CO2 by going through the TCA cycle. The
% problem with this is that in the model, TCA cycle also produces NADPH,
% which as we saw in section 1.3, can only be consumed through growth, which
% would consume all the ATP generated. As a consequence, respiration is not
% convenient in the model and ethanol production turns out to be the best
% possible option. Additionally, ethanol has the advantage of being the only
% NADH balanced carbon sink in the model, and therefore is preferred over
% glycerol (which overall consumes NADH) and acetate (which also creates
% NADPH).

%% Problem 3: Changing growth conditions
% 3.1 Adding additional reactions
% 
% a. Alternative aldehyde dehydrogenase
% 
% The reaction to add is:

% Acetaldehyde + NAD -> Acetate + NADH
%%
pos_ACA  = strcmp('ACA_c',model.mets);
pos_NAD  = strcmp('NAD_c',model.mets);
pos_AC   = strcmp('AC_c',model.mets);
pos_NADH = strcmp('NADH_c',model.mets);
ald_deh  = -pos_ACA + -pos_NAD + pos_AC + pos_NADH;
%%
% b. Glyoxylate cycle
% 
% The reactions to add are:

% Isocitrate -> Glyoxylate + Succinate
% Acetyl-CoA + Glyoxylate -> Malate + CoA
%%
% Which can be lumped together in just one:

% Isocitrate + Acetyl-CoA -> Succinate + Malate + CoA
%%
pos_ICIT  = strcmp('ICI_m',model.mets);
pos_ACCOA = strcmp('ACCOA_m',model.mets);
pos_SUCC  = strcmp('SUC_m',model.mets);
pos_MAL   = strcmp('MAL_m',model.mets);
pos_COA   = strcmp('COA_m',model.mets);
glyox_cyc = -pos_ICIT + -pos_ACCOA + pos_SUCC + pos_MAL + pos_COA;
%%
% Updating model components
% 
% The vector b remains the same (no new metabolites) and the vector c will
% be changed so it's not necessary to define. Therefore we update 
% model.rxns (with two extra names), S (with 2 extra columns), and LB and
% UB (with 2 extra rows):
model.rxns = [model.rxns;'ALD2';'GLYOX'];
S          = [S,ald_deh,glyox_cyc];
LB         = [LB;0;0];
UB         = [UB;1000;1000];
%%
% 3.2 Comparing growth conditions
% 
% a. Glucose - Aerobic
% 
% Glucose consumption and growth are already correctly constrained, so we
% only change the objective function to optimize growth:
c         = zeros(size(model.rxns));
c(pos(3)) = +1;
va        = maximize(c,S,b,LB,UB);
%%
% b. Glucose - Anaerobic
% 
% We repeat the simulation but with no oxygen consumption:
LB(pos(2)) = 0;
vb         = maximize(c,S,b,LB,UB);
%%
% c. Ethanol - Aerobic
% 
% We block glucose consumption, we unblock oxygen consumption, & we fix the
% ethanol consumption to be the same consumption C-mol wise as the previous
% simulations:
LB(pos(1)) = 0;
LB(pos(2)) = -1000;
LB(pos(6)) = -1*6/2; %1 mol glucose = 6 C-mol = 3*2 C-mol = 3 mol ethanol
vc         = maximize(c,S,b,LB,UB);
%%
% d. Ethanol - Anaerobic
% 
% We repeat the simulation but with no oxygen consumption:
LB(pos(2)) = 0;
vd         = maximize(c,S,b,LB,UB);
%%
% Exchange fluxes
var_names  = {'Gluc-Aerobic','Gluc-Anaerobic','EtOH-Aerobic','EtOH-Anaerobic'};
barplot([va,vb,vc,vd],pos,flux_names,var_names,'Fluxes',base+100)
%%
% *Figure 6:* Bar plot with exchange fluxes for growth under different
% conditions, assumming maximization of biomass. Fluxes are normalized by
% units of carbon
% 
% As we can see in the figure, compared to aerobic conditions, the model 
% under anaerobic conditions grows much slower, given that respiration
% cannot take place (reactions NADHX and FADHX require oxygen) and that is
% the highest ATP yield pathway for growth. As byproducts, both ethanol and
% glycerol are produced, the former to produce the needed ATP through the
% second half of glycolisis and the latter for balancing out the NADH
% balance (because of growth there is a surplus of NADH).
% 
% Looking now at aerobic growth on ethanol, we see that growth is more or
% less the same if we supply equimolar amounts of carbon compared to
% aerobic growth on glucose. The oxygen consumption increases ~4 times, as 
% much more NADH (2 per ethanol = 6 in total, vs 2 per glucose =
% 2 in total) and less ATP are produced, i.e. higher NADH/ATP ratio which
% leads to an elevated respiration level. Finally, the model is able to
% respire 100% as well, which can be confirmed with the absence of any
% byproduct and all carbon being directed to growth and CO2.
% 
% On last place we look now at anaerobic growth in ethanol. The model is
% not able to grow at all, which also is observed in yeast _in vivo_. This
% is because there is no way of producing a net amount of ATP, given that
% both possible options (respiration and fermentation) for doing so are
% unavailable.
% 
%%
%It seems that the model is not able to grow on ethanol in the absence of
%oxygen, let's analyse the effect of oxygen availability on its growth rate
gRate = [];
minOx = 0;
maxOx = 10;
steps = 100;
Oxygen = [];
for i=0:steps
    maxBound   = (maxOx-minOx)*(i)/steps;
    LB(pos(2)) = -maxBound;
    vd  = maximize(c,S,b,LB,UB);
    Oxygen = [Oxygen; -maxBound]; 
    gRate = [gRate; vd(2)];
end
figure

plot(Oxygen,gRate,'LineWidth',5)
title('Growth on ethanol','FontSize',20)   
xlabel('Oxygen exchange flux lower bound [mmol/gDwh]','FontSize',18)    
ylabel('Growth rate [g biomass/gDwh]','FontSize',18)    

%% 4 Additional exercise In silico gene deletions

rxnGeneMat = model.rxnGeneMat;
grRules    = model.grRules;
%Introduce missing elements for the new reactions
[~,genes]  = size(rxnGeneMat);
rxnGeneMat = [rxnGeneMat; zeros(1,genes); zeros(1,genes)];
grRules    = [grRules; {''}; {''}];
% Allow glucose and oxygen uptakes and block ethanol consumption
LB(pos(1)) = -1;
LB(pos(2)) = -10;
LB(pos(6)) = 0;

% 4.1) Find essential genes
essential = findEssentialGenes(rxnGeneMat,c,S,b,LB,UB,grRules);

disp('Essential genes for aerobic growth on glucose: ')
disp(essential)